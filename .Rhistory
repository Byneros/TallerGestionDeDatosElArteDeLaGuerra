conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Arte = conteo_arte,
Guerra = conteo_guerra)
# Crear un gráfico de barras
ggplot(resultados, aes(x = factor(Capitulo), y = Conocer, fill = "Conocer")) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = Conocer), vjust = -0.3) +  # Agregar etiquetas en las barras
geom_bar(aes(x = factor(Capitulo), y = Guerra, fill = "Guerra"), stat = "identity", position = "dodge") +
geom_text(aes(label = Guerra), vjust = -0.3) +  # Agregar etiquetas en las barras
labs(title = "Conteo de palabras 'arte' y 'guerra' por capítulo",
x = "Capítulo",
y = "Conteo") +
theme_minimal() +
scale_fill_manual(values = c("Arte" = "blue", "Guerra" = "red"))  # Personalizar colores de las barras
# Carga las librerias necesarias
library(ggplot2)
###################################################QUE DEBES CONOCER PARA GANAR CUALQUER BATALLA###################################################
# Leer el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y colocarlo en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what = "character", sep = "\n")
# Guarda la linea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I.")
start.v
# Guarda la linea del texto en donde finaliza la obra en end.v
end.v <- which(text.v == "FIN")
end.v
# Guardar el metadato del inicio de la obra, es decir, las líneas antes del inicio del primer capítulo
start.metadata.v <- text.v[1:start.v - 1]
start.metadata.v
# Guardar el metadato del final de la obra, es decir, las líneas después del final del último capítulo
end.metadata.v <- text.v[(end.v + 1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
# Ahora, las líneas de la novela son las que se encuentra entre la linea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos estas líneas en la variable (obra.lines.v)
obra.lines.v <-  text.v[start.v:end.v]
# Convertir el texto a minúsculas
obra.lines.v <- tolower(obra.lines.v)
# Dividir el texto en capítulos, utilizando como separador la cadena "/CAPITULO"
capitulos <- strsplit(paste(obra.lines.v, collapse = "\n"), "/capitulo")
# Buscar las posiciones de los capítulos
chap.positions.v <- grep("^CAPITULO \\d", obra.lines.v)
# Inicializar contadores para contar las ocurrencias de las palabras "arte" y "guerra" por capítulo
conteo_arte <- numeric(length(obra.lines.v))
conteo_guerra <- numeric(length(obra.lines.v))
# Iterar a través de cada capítulo y contar las ocurrencias de las palabras "arte" y "guerra"
for (i in 1:length(obra.lines.v)) {
capitulo_texto <- tolower(obra.lines.v[[i]])  # Convertir a minúsculas para hacer el conteo insensible a mayúsculas
conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Arte = conteo_arte,
Guerra = conteo_guerra)
# Crear un gráfico de barras
ggplot(resultados, aes(x = factor(Capitulo), y = Conocer, fill = "Conocer")) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = Conocer), vjust = -0.3) +  # Agregar etiquetas en las barras
geom_bar(aes(x = factor(Capitulo), y = Guerra, fill = "Guerra"), stat = "identity", position = "dodge") +
geom_text(aes(label = Guerra), vjust = -0.3) +  # Agregar etiquetas en las barras
labs(title = "Conteo de palabras 'arte' y 'guerra' por capítulo",
x = "Capítulo",
y = "Conteo") +
theme_minimal() +
scale_fill_manual(values = c("Arte" = "blue", "Guerra" = "red"))  # Personalizar colores de las barras
# Carga las librerias necesarias
library(ggplot2)
###################################################QUE DEBES CONOCER PARA GANAR CUALQUER BATALLA###################################################
# Leer el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y colocarlo en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what = "character", sep = "\n")
# Guarda la linea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I.")
start.v
# Guarda la linea del texto en donde finaliza la obra en end.v
end.v <- which(text.v == "FIN")
end.v
# Guardar el metadato del inicio de la obra, es decir, las líneas antes del inicio del primer capítulo
start.metadata.v <- text.v[1:start.v - 1]
start.metadata.v
# Guardar el metadato del final de la obra, es decir, las líneas después del final del último capítulo
end.metadata.v <- text.v[(end.v + 1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
# Ahora, las líneas de la novela son las que se encuentra entre la linea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos estas líneas en la variable (obra.lines.v)
obra.lines.v <-  text.v[start.v:end.v]
# Convertir el texto a minúsculas
obra.lines.v <- tolower(obra.lines.v)
# Dividir el texto en capítulos, utilizando como separador la cadena "/CAPITULO"
capitulos <- strsplit(paste(obra.lines.v, collapse = "\n"), "/capitulo")
# Buscar las posiciones de los capítulos
chap.positions.v <- grep("^CAPITULO \\d", obra.lines.v)
# Inicializar contadores para contar las ocurrencias de las palabras "arte" y "guerra" por capítulo
conteo_arte <- numeric(length(obra.lines.v))
conteo_guerra <- numeric(length(obra.lines.v))
# Iterar a través de cada capítulo y contar las ocurrencias de las palabras "arte" y "guerra"
for (i in 1:length(obra.lines.v)) {
capitulo_texto <- tolower(obra.lines.v[[i]])  # Convertir a minúsculas para hacer el conteo insensible a mayúsculas
conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
# Crear un gráfico de barras
ggplot(resultados, aes(x = factor(Capitulo), y = Conocer, fill = "Conocer")) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = Conocer), vjust = -0.3) +  # Agregar etiquetas en las barras
geom_bar(aes(x = factor(Capitulo), y = Guerra, fill = "Guerra"), stat = "identity", position = "dodge") +
geom_text(aes(label = Guerra), vjust = -0.3) +  # Agregar etiquetas en las barras
labs(title = "Conteo de palabras 'arte' y 'guerra' por capítulo",
x = "Capítulo",
y = "Conteo") +
theme_minimal() +
scale_fill_manual(values = c("Arte" = "blue", "Guerra" = "red"))  # Personalizar colores de las barras
# Carga las librerias necesarias
library(ggplot2)
###################################################QUE DEBES CONOCER PARA GANAR CUALQUER BATALLA###################################################
# Leer el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y colocarlo en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what = "character", sep = "\n")
# Guarda la linea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I.")
start.v
# Guarda la linea del texto en donde finaliza la obra en end.v
end.v <- which(text.v == "FIN")
end.v
# Guardar el metadato del inicio de la obra, es decir, las líneas antes del inicio del primer capítulo
start.metadata.v <- text.v[1:start.v - 1]
start.metadata.v
# Guardar el metadato del final de la obra, es decir, las líneas después del final del último capítulo
end.metadata.v <- text.v[(end.v + 1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
# Ahora, las líneas de la novela son las que se encuentra entre la linea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos estas líneas en la variable (obra.lines.v)
obra.lines.v <-  text.v[start.v:end.v]
# Convertir el texto a minúsculas
obra.lines.v <- tolower(obra.lines.v)
# Dividir el texto en capítulos, utilizando como separador la cadena "/CAPITULO"
capitulos <- strsplit(paste(obra.lines.v, collapse = "\n"), "/capitulo")
# Buscar las posiciones de los capítulos
chap.positions.v <- grep("^CAPITULO \\d", obra.lines.v)
# Inicializar contadores para contar las ocurrencias de las palabras "arte" y "guerra" por capítulo
conteo_arte <- numeric(length(obra.lines.v))
conteo_guerra <- numeric(length(obra.lines.v))
# Iterar a través de cada capítulo y contar las ocurrencias de las palabras "arte" y "guerra"
for (i in 1:length(obra.lines.v)) {
capitulo_texto <- tolower(obra.lines.v[[i]])  # Convertir a minúsculas para hacer el conteo insensible a mayúsculas
conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
# Crear un gráfico de barras
ggplot(resultados, aes(x = factor(Capitulo), y = Conocer, fill = "Conocer")) +
geom_bar(stat = "identity", position = "dodge") +
geom_text(aes(label = Conocer), vjust = -0.3) +  # Agregar etiquetas en las barras
geom_bar(aes(x = factor(Capitulo), y = Guerra, fill = "Guerra"), stat = "identity", position = "dodge") +
geom_text(aes(label = Guerra), vjust = -0.3) +  # Agregar etiquetas en las barras
labs(title = "Conteo de palabras 'arte' y 'guerra' por capítulo",
x = "Capítulo",
y = "Conteo") +
theme_minimal() +
scale_fill_manual(values = c("Conocer" = "blue", "Guerra" = "red"))  # Personalizar colores de las barras
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
Conocer
# Carga las librerias necesarias
library(ggplot2)
###################################################QUE DEBES CONOCER PARA GANAR CUALQUER BATALLA###################################################
# Leer el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y colocarlo en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what = "character", sep = "\n")
# Guarda la linea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I.")
start.v
# Guarda la linea del texto en donde finaliza la obra en end.v
end.v <- which(text.v == "FIN")
end.v
# Guardar el metadato del inicio de la obra, es decir, las líneas antes del inicio del primer capítulo
start.metadata.v <- text.v[1:start.v - 1]
start.metadata.v
# Guardar el metadato del final de la obra, es decir, las líneas después del final del último capítulo
end.metadata.v <- text.v[(end.v + 1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
# Ahora, las líneas de la novela son las que se encuentra entre la linea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos estas líneas en la variable (obra.lines.v)
obra.lines.v <-  text.v[start.v:end.v]
# Convertir el texto a minúsculas
obra.lines.v <- tolower(obra.lines.v)
# Dividir el texto en capítulos, utilizando como separador la cadena "/CAPITULO"
capitulos <- strsplit(paste(obra.lines.v, collapse = "\n"), "/capitulo")
# Buscar las posiciones de los capítulos
chap.positions.v <- grep("^CAPITULO \\d", obra.lines.v)
# Inicializar contadores para contar las ocurrencias de las palabras "arte" y "guerra" por capítulo
conteo_arte <- numeric(length(obra.lines.v))
conteo_guerra <- numeric(length(obra.lines.v))
# Iterar a través de cada capítulo y contar las ocurrencias de las palabras "arte" y "guerra"
for (i in 1:length(obra.lines.v)) {
capitulo_texto <- tolower(obra.lines.v[[i]])  # Convertir a minúsculas para hacer el conteo insensible a mayúsculas
conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
Conocer
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
# Carga las librerias necesarias
library(ggplot2)
###################################################QUE DEBES CONOCER PARA GANAR CUALQUER BATALLA###################################################
# Leer el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y colocarlo en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what = "character", sep = "\n")
# Guarda la linea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I.")
start.v
# Guarda la linea del texto en donde finaliza la obra en end.v
end.v <- which(text.v == "FIN")
end.v
# Guardar el metadato del inicio de la obra, es decir, las líneas antes del inicio del primer capítulo
start.metadata.v <- text.v[1:start.v - 1]
start.metadata.v
# Guardar el metadato del final de la obra, es decir, las líneas después del final del último capítulo
end.metadata.v <- text.v[(end.v + 1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
# Ahora, las líneas de la novela son las que se encuentra entre la linea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos estas líneas en la variable (obra.lines.v)
obra.lines.v <-  text.v[start.v:end.v]
# Convertir el texto a minúsculas
obra.lines.v <- tolower(obra.lines.v)
# Dividir el texto en capítulos, utilizando como separador la cadena "/CAPITULO"
capitulos <- strsplit(paste(obra.lines.v, collapse = "\n"), "/capitulo")
# Buscar las posiciones de los capítulos
chap.positions.v <- grep("^CAPITULO \\d", obra.lines.v)
# Inicializar contadores para contar las ocurrencias de las palabras "arte" y "guerra" por capítulo
conteo_arte <- numeric(length(obra.lines.v))
conteo_guerra <- numeric(length(obra.lines.v))
# Iterar a través de cada capítulo y contar las ocurrencias de las palabras "arte" y "guerra"
for (i in 1:length(obra.lines.v)) {
capitulo_texto <- tolower(obra.lines.v[[i]])  # Convertir a minúsculas para hacer el conteo insensible a mayúsculas
conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
resultados
# Iterar a través de cada capítulo y contar las ocurrencias de las palabras "arte" y "guerra"
for (i in 1:length(obra.lines.v)) {
capitulo_texto <- tolower(obra.lines.v[[i]])  # Convertir a minúsculas para hacer el conteo insensible a mayúsculas
conteo_arte[i] <- length(grep("\\barte\\b", capitulo_texto))
conteo_guerra[i] <- length(grep("\\bguerra\\b", capitulo_texto))
}
# Crear un dataframe con el conteo de palabras por capítulo
resultados <- data.frame(Capitulo = 1:length(capitulos) - 1,  # Restamos 1 para tener el número de capítulo real
Conocer = conteo_arte,
Guerra = conteo_guerra)
resultados
# Carga las librerias necesarias
library(ggplot2)
get()
# Carga las librerias necesarias
library(ggplot2)
getwd()
# Leer el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y colocarlo en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what="character", sep="\n")
# Guarda la linea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I.")
start.v
# Guarda la linea del texto en donde finaliza la obra en end.v
end.v <- which(text.v == "FIN")
end.v
# Guardar el metadato del inicio de la obra, es decir, las líneas antes del inicio del primer capítulo
start.metadata.v <- text.v[1:start.v -1]
start.metadata.v
# Guardar el metadato del final de la obra, es decir, las líneas después del final del último capítulo
end.metadata.v <- text.v[(end.v+1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
metadata.v
# Ahora, las lineas de la novela son las que se encuentra entre la linea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos estas lineas en la variable (obra.lines.v)
obra.lines.v <-  text.v[start.v:end.v]
########################################################################################################################
###################################################Cuantos capitulos aparecen en la obra - Tabla de capitulos###################################################
# Encontrar las posiciones donde aparece el patrón "CAPITULO \\d" (donde \\d representa un dígito) en obra.lines.v
cap.posicion.v <- grep("CAPITULO", obra.lines.v)
# Crear un data frame con los datos impresos
datos_impresos <- data.frame(
Capitulo = 1:length(cap.posicion.v),
Posicion = cap.posicion.v,
Linea = obra.lines.v[cap.posicion.v]
)
# Imprimir la tabla
print(datos_impresos)
obra.lines.v
obra.lines.v <- tolower(obra.lines.v)
obra.lines.v
library(shiny); runApp('~/GitHub/DataScience-R-Dashboards/Dash6-Dynamic UI.R')
runApp('~/GitHub/DataScience-R-Dashboards/Dash8-sidebar.R')
runApp('~/GitHub/DataScience-R-Dashboards/Dash8-sidebar.R')
runApp('~/GitHub/DataScience-R-Dashboards/Dash9.1.R')
# Carga las librerias necesarias
library(ggplot2)
library(wordcloud2)
library(shinydashboard)
#########################################################################################################################
########################################DashBoard###################################################################
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
sliderInput("slider", "Slider input:", 1, 100, 50),
"radioButtons" = radioButtons("dynamic", "Dynamic",
choices = c("Graficos de arte y guerra" = "option1",
"Grafico de palabras claves" = "option2",
"Nube de palabras" = "option2"),
selected = "option2"
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(
title = "Histograma",
plotOutput("plot1", height = 250)
),
box(
title = "Inputs", status = "warning",
"Box content here", br(), "More box content",
textInput("text", "Text input:")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
histdata
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
# Carga las librerias necesarias
library(ggplot2)
library(wordcloud2)
library(shinydashboard)
#########################################################################################################################
########################################DashBoard###################################################################
ui <- dashboardPage(
dashboardHeader(title = "Basic dashboard"),
dashboardSidebar(
"radioButtons" = radioButtons("dynamic", "Dynamic",
choices = c("Graficos de arte y guerra" = "option1",
"Grafico de palabras claves" = "option2",
"Nube de palabras" = "option2"),
selected = "option2"
)
),
dashboardBody(
# Boxes need to be put in a row (or column)
fluidRow(
box(
title = "Histograma",
plotOutput("plot1", height = 250)
),
box(
title = "Inputs", status = "warning",
"Box content here", br(), "More box content",
textInput("text", "Text input:")
)
)
)
)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
histdata
output$plot1 <- renderPlot({
data <- histdata[seq_len(input$slider)]
hist(data)
})
}
shinyApp(ui, server)
# Carga las librerias necesarias
library(ggplot2)
library(wordcloud2)
library(shinydashboard)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
# Función para filtrar solo las frases que contienen una palabra clave
filtrar_frases_palabra <- function(palabra) {
phrases[grepl(paste0("\\b", palabra, "\\b"), phrases, ignore.case = TRUE)]
}
# Histograma: Arte y Guerra
output$plot1 <- renderPlot({
if (input$dynamic == "option1") {
data <- histdata[seq_len(input$slider)]
hist(data)
}
})
# Gráfico de palabras clave
output$plot2 <- renderPlot({
if (input$dynamic == "option2") {
num_palabras <- sapply(palabras_claves, function(palabra) {
length(filtrar_frases_palabra(palabra))
})
# Crear un data frame para el gráfico
datos_grafico <- data.frame(
Palabra = palabras_claves,
Numero = num_palabras
)
# Gráfico de barras con ggplot2
ggplot(datos_grafico, aes(x = Palabra, y = Numero, fill = Palabra)) +
geom_bar(stat = "identity", color = "black") +
labs(x = NULL, y = "Número de frases", title = "Frases que contienen palabras clave") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
})
# Nube de palabras: Verbos más frecuentes
output$plot3 <- renderWordcloud2({
if (input$dynamic == "option3") {
# Crear la nube de palabras
texto_completo <- paste(phrases, collapse = " ")
texto_verbos <- filtrar_verbos(texto_completo)
wordcloud2(data = data.frame(word = names(table(strsplit(texto_verbos, "\\s+"))),
freq = as.numeric(table(strsplit(texto_verbos, "\\s+")))),
color = "random-light",
backgroundColor = "black",
size = 1.5,
minRotation = -pi/4,
maxRotation = -pi/4)
}
})
}
shinyApp(ui, server)
# Carga las librerias necesarias
library(ggplot2)
library(wordcloud2)
library(shinydashboard)
server <- function(input, output) {
set.seed(122)
histdata <- rnorm(500)
# Función para filtrar solo las frases que contienen una palabra clave
filtrar_frases_palabra <- function(palabra) {
phrases[grepl(paste0("\\b", palabra, "\\b"), phrases, ignore.case = TRUE)]
}
# Histograma: Arte y Guerra
output$plot1 <- renderPlot({
if (input$dynamic == "option1") {
data <- histdata[seq_len(input$slider)]
hist(data)
}
})
# Gráfico de palabras clave
output$plot2 <- renderPlot({
if (input$dynamic == "option2") {
num_palabras <- sapply(palabras_claves, function(palabra) {
length(filtrar_frases_palabra(palabra))
})
# Crear un data frame para el gráfico
datos_grafico <- data.frame(
Palabra = palabras_claves,
Numero = num_palabras
)
# Gráfico de barras con ggplot2
ggplot(datos_grafico, aes(x = Palabra, y = Numero, fill = Palabra)) +
geom_bar(stat = "identity", color = "black") +
labs(x = NULL, y = "Número de frases", title = "Frases que contienen palabras clave") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
}
})
# Nube de palabras: Verbos más frecuentes
output$plot3 <- renderWordcloud2({
if (input$dynamic == "option3") {
# Crear la nube de palabras
texto_completo <- paste(phrases, collapse = " ")
texto_verbos <- filtrar_verbos(texto_completo)
wordcloud2(data = data.frame(word = names(table(strsplit(texto_verbos, "\\s+"))),
freq = as.numeric(table(strsplit(texto_verbos, "\\s+")))),
color = "random-light",
backgroundColor = "black",
size = 1.5,
minRotation = -pi/4,
maxRotation = -pi/4)
}
})
}
shinyApp(ui, server)
