capitulo.freqs.t.rel <- 100*(capitulo.freqs.t/sum(capitulo.freqs.t))
capitulo.freqs.l[[capitulo.title]]<-capitulo.freqs.t.rel
}
}
for (i in 1:length(cap.posicion.v)) {
print(paste("capitulo", i, "comienza en la posición", cap.posicion.v[i]), sep = "")
}
# Create a function to extract paragraphs containing the word "conocer" from a capitulo
extract_conocer_paragraphs <- function(capitulo_lines) {
conocer_paragraphs <- list()
current_paragraph <- ""
for (line in capitulo_lines) {
if (grepl("conocer", line, ignore.case = TRUE)) {
current_paragraph <- paste(current_paragraph, line, sep = "\n")
} else if (nzchar(current_paragraph)) {
conocer_paragraphs <- c(conocer_paragraphs, current_paragraph)
current_paragraph <- ""
}
}
conocer_paragraphs
}
# Initialize a list to store the paragraphs containing "conocer" for each capitulo
phrases <- list()
# Loop through each capitulo to find and store paragraphs containing "conocer"
for (i in 1:length(cap.posicion.v)) {
if (i != length(cap.posicion.v)) {
capitulo.lines.v <- novel.lines.v[(cap.posicion.v[i] + 1):(cap.posicion.v[i + 1] - 1)]
conocer_paragraphs <- extract_conocer_paragraphs(capitulo.lines.v)
phrases[[i]] <- conocer_paragraphs
}
}
# Print paragraphs containing "conocer" for each capitulo
for (i in 1:length(phrases)) {
if (length(phrases[[i]]) > 0) {
cat(paste("capitulo", i, ":\n"))
for (phrase in phrases[[i]]) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
}
}
# Encontrar las posiciones donde aparece el patrón "CAPITULO \\d" (donde \\d representa un dígito) en novel.lines.v
novel.lines.v <- phrase
cap.posicion.v <- grep("CAPITULO", novel.lines.v)
cap.posicion.v
# Extraer las líneas de novel.lines.v que contienen el patrón "CAPITULO \\d" usando las posiciones encontradas
novel.lines.v[cap.posicion.v]
# Agregar la etiqueta "END" al final de novel.lines.v
novel.lines.v<-c(novel.lines.v,"END")
# Obtener la última posición (longitud) de novel.lines.v
last.position.v<-length(novel.lines.v)
last.position.v
# Agregar la posición de "END" al vector de posiciones de los capítulos (cap.posicion.v)
cap.posicion.v<-c(cap.posicion.v,last.position.v)
cap.posicion.v
# Imprimir cada posición de los capítulos encontrados
for (i in 1:length(cap.posicion.v)) {
print(cap.posicion.v[i])
}
for (i in 1:length(cap.posicion.v)){
print(paste("capitulo",i,"comienza en la posici?n",cap.posicion.v[i]),sep = "")
}
capitulo.raws.l <- list()
capitulo.freqs.l<- list()
for (i in 1:length(cap.posicion.v)){
if (i != length(cap.posicion.v)){
capitulo.title <- novel.lines.v [cap.posicion.v[i]]
startc <- cap.posicion.v[i]+1
endc <- cap.posicion.v[i+1]-1
capitulo.lines.v <- novel.lines.v[startc:endc]
capitulo.words.v <- tolower(paste(capitulo.lines.v, collapse = ""))
capitulo.words.l <- strsplit(capitulo.words.v, "\\W")
capitulo.word.v <- unlist(capitulo.words.l)
capitulo.word.v <- capitulo.word.v [which(capitulo.word.v!="")]
capitulo.freqs.t<-table(capitulo.word.v)
capitulo.raws.l[[capitulo.title]]<- capitulo.freqs.t
capitulo.freqs.t.rel <- 100*(capitulo.freqs.t/sum(capitulo.freqs.t))
capitulo.freqs.l[[capitulo.title]]<-capitulo.freqs.t.rel
}
}
for (i in 1:length(cap.posicion.v)) {
print(paste("capitulo", i, "comienza en la posición", cap.posicion.v[i]), sep = "")
}
# Create a function to extract paragraphs containing the word "conocer" from a capitulo
extract_conocer_paragraphs <- function(capitulo_lines) {
conocer_paragraphs <- list()
current_paragraph <- ""
for (line in capitulo_lines) {
if (grepl("conocer", line, ignore.case = TRUE)) {
current_paragraph <- paste(current_paragraph, line, sep = "\n")
} else if (nzchar(current_paragraph)) {
conocer_paragraphs <- c(conocer_paragraphs, current_paragraph)
current_paragraph <- ""
}
}
conocer_paragraphs
}
# Initialize a list to store the paragraphs containing "conocer" for each capitulo
phrases <- list()
# Loop through each capitulo to find and store paragraphs containing "conocer"
for (i in 1:length(cap.posicion.v)) {
if (i != length(cap.posicion.v)) {
capitulo.lines.v <- novel.lines.v[(cap.posicion.v[i] + 1):(cap.posicion.v[i + 1] - 1)]
conocer_paragraphs <- extract_conocer_paragraphs(capitulo.lines.v)
phrases[[i]] <- conocer_paragraphs
}
}
# Print paragraphs containing "conocer" for each capitulo
for (i in 1:length(phrases)) {
if (length(phrases[[i]]) > 0) {
cat(paste("capitulo", i, ":\n"))
for (phrase in phrases[[i]]) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
}
}
# Encontrar las posiciones donde aparece el patrón "CAPITULO \\d" (donde \\d representa un dígito) en novel.lines.v
novel.lines.v <- phrases
cap.posicion.v <- grep("CAPITULO", novel.lines.v)
cap.posicion.v
# Extraer las líneas de novel.lines.v que contienen el patrón "CAPITULO \\d" usando las posiciones encontradas
novel.lines.v[cap.posicion.v]
# Agregar la etiqueta "END" al final de novel.lines.v
novel.lines.v<-c(novel.lines.v,"END")
# Obtener la última posición (longitud) de novel.lines.v
last.position.v<-length(novel.lines.v)
last.position.v
# Agregar la posición de "END" al vector de posiciones de los capítulos (cap.posicion.v)
cap.posicion.v<-c(cap.posicion.v,last.position.v)
cap.posicion.v
# Imprimir cada posición de los capítulos encontrados
for (i in 1:length(cap.posicion.v)) {
print(cap.posicion.v[i])
}
for (i in 1:length(cap.posicion.v)){
print(paste("capitulo",i,"comienza en la posici?n",cap.posicion.v[i]),sep = "")
}
capitulo.raws.l <- list()
capitulo.freqs.l<- list()
for (i in 1:length(cap.posicion.v)){
if (i != length(cap.posicion.v)){
capitulo.title <- novel.lines.v [cap.posicion.v[i]]
startc <- cap.posicion.v[i]+1
endc <- cap.posicion.v[i+1]-1
capitulo.lines.v <- novel.lines.v[startc:endc]
capitulo.words.v <- tolower(paste(capitulo.lines.v, collapse = ""))
capitulo.words.l <- strsplit(capitulo.words.v, "\\W")
capitulo.word.v <- unlist(capitulo.words.l)
capitulo.word.v <- capitulo.word.v [which(capitulo.word.v!="")]
capitulo.freqs.t<-table(capitulo.word.v)
capitulo.raws.l[[capitulo.title]]<- capitulo.freqs.t
capitulo.freqs.t.rel <- 100*(capitulo.freqs.t/sum(capitulo.freqs.t))
capitulo.freqs.l[[capitulo.title]]<-capitulo.freqs.t.rel
}
}
for (i in 1:length(cap.posicion.v)) {
print(paste("capitulo", i, "comienza en la posición", cap.posicion.v[i]), sep = "")
}
# Create a function to extract paragraphs containing the word "conocer" from a capitulo
extract_conocer_paragraphs <- function(capitulo_lines) {
conocer_paragraphs <- list()
current_paragraph <- ""
for (line in capitulo_lines) {
if (grepl("conocer", line, ignore.case = TRUE)) {
current_paragraph <- paste(current_paragraph, line, sep = "\n")
} else if (nzchar(current_paragraph)) {
conocer_paragraphs <- c(conocer_paragraphs, current_paragraph)
current_paragraph <- ""
}
}
conocer_paragraphs
}
# Initialize a list to store the paragraphs containing "conocer" for each capitulo
phrases <- list()
# Loop through each capitulo to find and store paragraphs containing "conocer"
for (i in 1:length(cap.posicion.v)) {
if (i != length(cap.posicion.v)) {
capitulo.lines.v <- novel.lines.v[(cap.posicion.v[i] + 1):(cap.posicion.v[i + 1] - 1)]
conocer_paragraphs <- extract_conocer_paragraphs(capitulo.lines.v)
phrases[[i]] <- conocer_paragraphs
}
}
# Print paragraphs containing "conocer" for each capitulo
for (i in 1:length(phrases)) {
if (length(phrases[[i]]) > 0) {
cat(paste("capitulo", i, ":\n"))
for (phrase in phrases[[i]]) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
}
}
# Encontrar las posiciones donde aparece el patrón "CAPITULO \\d" (donde \\d representa un dígito) en novel.lines.v
novel.lines.v <- phrases
cap.posicion.v <- grep("CAPITULO", novel.lines.v)
cap.posicion.v
# Extraer las líneas de novel.lines.v que contienen el patrón "CAPITULO \\d" usando las posiciones encontradas
novel.lines.v[cap.posicion.v]
# Agregar la etiqueta "END" al final de novel.lines.v
novel.lines.v<-c(novel.lines.v,"END")
# Obtener la última posición (longitud) de novel.lines.v
last.position.v<-length(novel.lines.v)
last.position.v
# Agregar la posición de "END" al vector de posiciones de los capítulos (cap.posicion.v)
cap.posicion.v<-c(cap.posicion.v,last.position.v)
cap.posicion.v
# Imprimir cada posición de los capítulos encontrados
for (i in 1:length(cap.posicion.v)) {
print(cap.posicion.v[i])
}
for (i in 1:length(cap.posicion.v)){
print(paste("capitulo",i,"comienza en la posici?n",cap.posicion.v[i]),sep = "")
}
capitulo.raws.l <- list()
capitulo.freqs.l<- list()
for (i in 1:length(cap.posicion.v)){
if (i != length(cap.posicion.v)){
capitulo.title <- novel.lines.v [cap.posicion.v[i]]
startc <- cap.posicion.v[i]+1
endc <- cap.posicion.v[i+1]-1
capitulo.lines.v <- novel.lines.v[startc:endc]
capitulo.words.v <- tolower(paste(capitulo.lines.v, collapse = ""))
capitulo.words.l <- strsplit(capitulo.words.v, "\\W")
capitulo.word.v <- unlist(capitulo.words.l)
capitulo.word.v <- capitulo.word.v [which(capitulo.word.v!="")]
capitulo.freqs.t<-table(capitulo.word.v)
capitulo.raws.l[[capitulo.title]]<- capitulo.freqs.t
capitulo.freqs.t.rel <- 100*(capitulo.freqs.t/sum(capitulo.freqs.t))
capitulo.freqs.l[[capitulo.title]]<-capitulo.freqs.t.rel
}
}
for (i in 1:length(cap.posicion.v)) {
print(paste("capitulo", i, "comienza en la posición", cap.posicion.v[i]), sep = "")
}
# Create a function to extract paragraphs containing the word "conocer" from a capitulo
extract_conocer_paragraphs <- function(capitulo_lines) {
conocer_paragraphs <- list()
current_paragraph <- ""
for (line in capitulo_lines) {
if (grepl("conocer", line, ignore.case = TRUE)) {
current_paragraph <- paste(current_paragraph, line, sep = "\n")
} else if (nzchar(current_paragraph)) {
conocer_paragraphs <- c(conocer_paragraphs, current_paragraph)
current_paragraph <- ""
}
}
conocer_paragraphs
}
# Initialize a list to store the paragraphs containing "conocer" for each capitulo
phrases <- list()
# Loop through each capitulo to find and store paragraphs containing "conocer"
for (i in 1:length(cap.posicion.v)) {
if (i != length(cap.posicion.v)) {
capitulo.lines.v <- novel.lines.v[(cap.posicion.v[i] + 1):(cap.posicion.v[i + 1] - 1)]
conocer_paragraphs <- extract_conocer_paragraphs(capitulo.lines.v)
phrases[[i]] <- conocer_paragraphs
}
}
# Print paragraphs containing "conocer" for each capitulo
for (i in 1:length(phrases)) {
if (length(phrases[[i]]) > 0) {
cat(paste("capitulo", i, ":\n"))
for (phrase in phrases[[i]]) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
}
}
# Encontrar las posiciones donde aparece el patrón "CAPITULO \\d" (donde \\d representa un dígito) en novel.lines.v
novel.lines.v <- novel.v
cap.posicion.v <- grep("CAPITULO", novel.lines.v)
cap.posicion.v
# Extraer las líneas de novel.lines.v que contienen el patrón "CAPITULO \\d" usando las posiciones encontradas
novel.lines.v[cap.posicion.v]
# Agregar la etiqueta "END" al final de novel.lines.v
novel.lines.v<-c(novel.lines.v,"END")
# Obtener la última posición (longitud) de novel.lines.v
last.position.v<-length(novel.lines.v)
last.position.v
# Agregar la posición de "END" al vector de posiciones de los capítulos (cap.posicion.v)
cap.posicion.v<-c(cap.posicion.v,last.position.v)
cap.posicion.v
# Imprimir cada posición de los capítulos encontrados
for (i in 1:length(cap.posicion.v)) {
print(cap.posicion.v[i])
}
for (i in 1:length(cap.posicion.v)){
print(paste("capitulo",i,"comienza en la posici?n",cap.posicion.v[i]),sep = "")
}
capitulo.raws.l <- list()
capitulo.freqs.l<- list()
for (i in 1:length(cap.posicion.v)){
if (i != length(cap.posicion.v)){
capitulo.title <- novel.lines.v [cap.posicion.v[i]]
startc <- cap.posicion.v[i]+1
endc <- cap.posicion.v[i+1]-1
capitulo.lines.v <- novel.lines.v[startc:endc]
capitulo.words.v <- tolower(paste(capitulo.lines.v, collapse = ""))
capitulo.words.l <- strsplit(capitulo.words.v, "\\W")
capitulo.word.v <- unlist(capitulo.words.l)
capitulo.word.v <- capitulo.word.v [which(capitulo.word.v!="")]
capitulo.freqs.t<-table(capitulo.word.v)
capitulo.raws.l[[capitulo.title]]<- capitulo.freqs.t
capitulo.freqs.t.rel <- 100*(capitulo.freqs.t/sum(capitulo.freqs.t))
capitulo.freqs.l[[capitulo.title]]<-capitulo.freqs.t.rel
}
}
for (i in 1:length(cap.posicion.v)) {
print(paste("capitulo", i, "comienza en la posición", cap.posicion.v[i]), sep = "")
}
# Create a function to extract paragraphs containing the word "conocer" from a capitulo
extract_conocer_paragraphs <- function(capitulo_lines) {
conocer_paragraphs <- list()
current_paragraph <- ""
for (line in capitulo_lines) {
if (grepl("conocer", line, ignore.case = TRUE)) {
current_paragraph <- paste(current_paragraph, line, sep = "\n")
} else if (nzchar(current_paragraph)) {
conocer_paragraphs <- c(conocer_paragraphs, current_paragraph)
current_paragraph <- ""
}
}
conocer_paragraphs
}
# Initialize a list to store the paragraphs containing "conocer" for each capitulo
phrases <- list()
# Loop through each capitulo to find and store paragraphs containing "conocer"
for (i in 1:length(cap.posicion.v)) {
if (i != length(cap.posicion.v)) {
capitulo.lines.v <- novel.lines.v[(cap.posicion.v[i] + 1):(cap.posicion.v[i + 1] - 1)]
conocer_paragraphs <- extract_conocer_paragraphs(capitulo.lines.v)
phrases[[i]] <- conocer_paragraphs
}
}
# Print paragraphs containing "conocer" for each capitulo
for (i in 1:length(phrases)) {
if (length(phrases[[i]]) > 0) {
cat(paste("capitulo", i, ":\n"))
for (phrase in phrases[[i]]) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
}
}
# Encontrar las posiciones donde aparece el patrón "CAPITULO \\d" (donde \\d representa un dígito) en novel.lines.v
cap.posicion.v <- grep("CAPITULO", novel.lines.v)
cap.posicion.v
# Extraer las líneas de novel.lines.v que contienen el patrón "CAPITULO \\d" usando las posiciones encontradas
novel.lines.v[cap.posicion.v]
# Agregar la etiqueta "END" al final de novel.lines.v
novel.lines.v<-c(novel.lines.v,"END")
# Obtener la última posición (longitud) de novel.lines.v
last.position.v<-length(novel.lines.v)
last.position.v
# Agregar la posición de "END" al vector de posiciones de los capítulos (cap.posicion.v)
cap.posicion.v<-c(cap.posicion.v,last.position.v)
cap.posicion.v
# Imprimir cada posición de los capítulos encontrados
for (i in 1:length(cap.posicion.v)) {
print(cap.posicion.v[i])
}
for (i in 1:length(cap.posicion.v)){
print(paste("capitulo",i,"comienza en la posici?n",cap.posicion.v[i]),sep = "")
}
capitulo.raws.l <- list()
capitulo.freqs.l<- list()
for (i in 1:length(cap.posicion.v)){
if (i != length(cap.posicion.v)){
capitulo.title <- novel.lines.v [cap.posicion.v[i]]
startc <- cap.posicion.v[i]+1
endc <- cap.posicion.v[i+1]-1
capitulo.lines.v <- novel.lines.v[startc:endc]
capitulo.words.v <- tolower(paste(capitulo.lines.v, collapse = ""))
capitulo.words.l <- strsplit(capitulo.words.v, "\\W")
capitulo.word.v <- unlist(capitulo.words.l)
capitulo.word.v <- capitulo.word.v [which(capitulo.word.v!="")]
capitulo.freqs.t<-table(capitulo.word.v)
capitulo.raws.l[[capitulo.title]]<- capitulo.freqs.t
capitulo.freqs.t.rel <- 100*(capitulo.freqs.t/sum(capitulo.freqs.t))
capitulo.freqs.l[[capitulo.title]]<-capitulo.freqs.t.rel
}
}
for (i in 1:length(cap.posicion.v)) {
print(paste("capitulo", i, "comienza en la posición", cap.posicion.v[i]), sep = "")
}
# Create a function to extract paragraphs containing the word "conocer" from a capitulo
extract_conocer_paragraphs <- function(capitulo_lines) {
conocer_paragraphs <- list()
current_paragraph <- ""
for (line in capitulo_lines) {
if (grepl("conocer", line, ignore.case = TRUE)) {
current_paragraph <- paste(current_paragraph, line, sep = "\n")
} else if (nzchar(current_paragraph)) {
conocer_paragraphs <- c(conocer_paragraphs, current_paragraph)
current_paragraph <- ""
}
}
conocer_paragraphs
}
# Initialize a list to store the paragraphs containing "conocer" for each capitulo
phrases <- list()
# Loop through each capitulo to find and store paragraphs containing "conocer"
for (i in 1:length(cap.posicion.v)) {
if (i != length(cap.posicion.v)) {
capitulo.lines.v <- novel.lines.v[(cap.posicion.v[i] + 1):(cap.posicion.v[i + 1] - 1)]
conocer_paragraphs <- extract_conocer_paragraphs(capitulo.lines.v)
phrases[[i]] <- conocer_paragraphs
}
}
# Print paragraphs containing "conocer" for each capitulo
for (i in 1:length(phrases)) {
if (length(phrases[[i]]) > 0) {
cat(paste("capitulo", i, ":\n"))
for (phrase in phrases[[i]]) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
}
}
library(tm)
library(stringr)
#Mirar cual es el folder de trabajo actual y asegurarse que en el est? el documento de la obra
getwd()
#Lee el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y lo coloca en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what="character", sep="\n")
# Guarda lal?nea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I")
start.v
# Guarda la linea del texto en donde finaliza la obra en start.v
end.v <- which(text.v == "FIN")
end.v
start.metadata.v <- text.v[1:start.v -1]
start.metadata.v
# El metadato del final de la obra inicia en la l?nea (end.v+1) y finaliza en la ?ltima de la obra
end.metadata.v <- text.v[(end.v+1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
metadata.v
# Ahora, las lineas de la novela son las que se encuentra entre la l?nea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos est?s l?neas en la variable (novel.lines.v)
novel.lines.v <-  text.v[start.v:end.v]
novel.lines.v
# Combine all the lines of the novel into a single line with no separator
novel.v <- paste(novel.lines.v, collapse = "")
novel.lines.v
##
# Add line breaks after each period in the novel text
novel.v <- gsub("\\.", ".\n", novel.v)
# Divida el texto de la novela en frases usando saltos de línea como separador
phrases <- strsplit(novel.v, "\n")[[1]]
# Imprime cada frase capturada entre los saltos de línea
for (phrase in phrases) {
cat(phrase, "\n\n")
}
# Imprimir cada frase capturada entre los saltos de línea que contenga la palabra "conocer"
cat("Frases que contienen la palabra 'conocer':\n")
for (phrase in phrases) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
library(tm)
library(stringr)
#Mirar cual es el folder de trabajo actual y asegurarse que en el est? el documento de la obra
getwd()
#Lee el texto desde el archivo "El Arte De La Guerra Sun Tzu.txt" y lo coloca en un vector
text.v <- scan("El Arte De La Guerra Sun Tzu.txt", what="character", sep="\n")
# Guarda lal?nea del texto en donde inicia la obra en start.v
start.v <- which(text.v == "/CAPITULO I")
start.v
# Guarda la linea del texto en donde finaliza la obra en start.v
end.v <- which(text.v == "FIN")
end.v
start.metadata.v <- text.v[1:start.v -1]
start.metadata.v
# El metadato del final de la obra inicia en la l?nea (end.v+1) y finaliza en la ?ltima de la obra
end.metadata.v <- text.v[(end.v+1):length(text.v)]
end.metadata.v
# Colocamos todo el metadato de la obra en la variable (metadata.v)
metadata.v <- c(start.metadata.v, end.metadata.v)
metadata.v
# Ahora, las lineas de la novela son las que se encuentra entre la l?nea de inicio (start.v) y la de fin de la obra (end.v)
# Colocaremos est?s l?neas en la variable (novel.lines.v)
novel.lines.v <-  text.v[start.v:end.v]
novel.lines.v
# Combine all the lines of the novel into a single line with no separator
novel.v <- paste(novel.lines.v, collapse = "")
novel.lines.v
##
# Add line breaks after each period in the novel text
novel.v <- gsub("\\.", ".\n", novel.v)
# Divida el texto de la novela en frases usando saltos de línea como separador
phrases <- strsplit(novel.v, "\n")[[1]]
# Imprime cada frase capturada entre los saltos de línea
for (phrase in phrases) {
cat(phrase, "\n\n")
}
# Imprimir cada frase capturada entre los saltos de línea que contenga la palabra "conocer"
cat("Frases que contienen la palabra 'conocer':\n")
for (phrase in phrases) {
if (grepl("\\bconocer\\b", phrase, ignore.case = TRUE)) {
cat(phrase, "\n\n")
}
}
